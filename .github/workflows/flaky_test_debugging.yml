name: citusdata/citus/flaky_test_debugging
on:
  workflow_dispatch:
    inputs:
      flaky-test:
        required: true
        type: string
      flaky-test-runs-per-job:
        required: false
        default: 50
        type: number
env:
  image_suffix: -vbab548a
  pg15_version: 15.3
  PG_MAJOR: 15
  build_image_name: citus/extbuilder
  test_image_name: citus/failtester
jobs:
  job1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=${{ env.test_image_name }}:${{ env.pg15_version  }}${{ env.image_suffix }}" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=${{ env.build_image_name }}:${{ env.pg15_version  }}${{ env.image_suffix }}" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-latest
    needs: job1
    container:
      image: ${{needs.job1.outputs.output1}}
    steps:
    - run: echo "${{needs.job1.outputs.output1}}"
    - uses: actions/checkout@v3.5.0
    - name: Configure, Build, and Install
      run: "./ci/build-citus.sh"
    - uses: actions/upload-artifact@v3.1.1
      with:
        path: |-
          ./build-${{ env.pg_major }}/*
          ./install-${{ env.pg_major }}.tar

  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
          OUTPUT2: ${{needs.job1.outputs.output2}}
        run: |
         echo "$OUTPUT1 $OUTPUT2"
         echo "${{needs.job1.outputs.output1}}"
         echo "${{needs.job1.outputs.output2}}"
  test-flakyness:
    if: ${{ inputs.flaky-test }}
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.set-image-names.outputs.test_image }}
    needs:
    - build
    env:
      test: "${{ inputs.flaky-test }}"
      runs: "${{ inputs.flaky-test-runs-per-job }}"
      skip: false
    steps:
    - uses: actions/checkout@v3.5.0
    - uses: actions/download-artifact@v3.0.1
      with:
        path: "."
    - name: Detect regression tests need to be ran
      id: detect-regression-tests
      run: |-
        testForDebugging="${{ env.test }}"
        if [ -z "$testForDebugging" ]; then
          detected_changes=$(git diff origin/main... --name-only --diff-filter=AM | (grep 'src/test/regress/sql/.*\.sql\|src/test/regress/spec/.*\.spec\|src/test/regress/citus_tests/test/test_.*\.py' || true))
          tests=${detected_changes}
        else
          tests=$testForDebugging;
        fi
        if [ -z "$tests" ]; then
            echo "No test found."
            gh run cancel ${{ github.run_id }}
            gh run watch ${{ github.run_id }}
        else
          echo "Detected tests " $tests
        fi
        echo "tests=$tests" >> "$GITHUB_OUTPUT"
    - uses: "./.github/actions/install_extension"
      with:
        pg_major: "${{ env.pg_major }}"
    - uses: "./.github/actions/configure"
    - uses: "./.github/actions/enable_core"
    - name: Run minimal tests
      run: |-
        tests_array=(${{ steps.detect-regression-tests.outputs.tests }})
        for test in "${tests_array[@]}"
        do
            test_name=$(echo "$test" | sed -r "s/.+\/(.+)\..+/\1/")
            gosu circleci src/test/regress/citus_tests/run_test.py $test_name --repeat ${{ env.runs }} --use-base-schedule --use-whole-schedule-line
        done
    - uses: "./.github/actions/save_logs_and_results"
    - uses: "./.github/actions/save_regressions"
    - uses: "./.github/actions/stack_trace"
